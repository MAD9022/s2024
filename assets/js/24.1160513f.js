(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{324:function(e,t,s){"use strict";s.r(t);var a=s(10),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"projects"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#projects"}},[e._v("#")]),e._v(" Projects")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"#_1-pwa-project"}},[e._v("Project One - TMBD PWA")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#_2-nextjs-project"}},[e._v("Project Two - NextJS Crapr")])])]),e._v(" "),t("h2",{attrs:{id:"_1-pwa-project"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-pwa-project"}},[e._v("#")]),e._v(" 1. PWA Project")]),e._v(" "),t("p",[e._v("An installable, Offline-first PWA, with a responsive layout, that will have parts that work when offline.")]),e._v(" "),t("p",[e._v("This is a joint project between MAD9022 and MAD9124. The PWA portion of the app will be the deliverable for MAD9022 and the server-side API portion will be the deliverable for MAD9124. Each part has\nits own due date. Both parts need to be working for your MAD9022 PWA to work. If you don't have a working API then there is no way to have a working PWA.")]),e._v(" "),t("p",[e._v("The app starts with a search screen that lets the user enter a keyword and select how they want to sort the results. Submitting the search form takes the user to the search results screen and runs the\nfetch call to your API. The results of the call to your API get displayed on the search results screen as a series of list items. Each of the images for movies in the search results should be saved in\nthe cache to save time later.")]),e._v(" "),t("p",[e._v("Each of the list items has a thumbnail image, an icon, and a movie title. If the user clicks on one of the thumbnails the app will navigate to a details screen that shows a bigger movie image, the\nmovie title, plus other information about the movie. The details of a selected movie need to be saved in a separate cache as a JSON file.")]),e._v(" "),t("p",[e._v("The app needs to meet all the PWA requirements so the install icon appears in the location bar.")]),e._v(" "),t("p",[e._v("When the browser is offline, the service worker should return all the static files from the cache. The user should still be able to go to the home page fill in the form and submit it. This will take\nthe user to a results page, but a cache results page will load instead of the search results page. The cache results page will display list items like the search results page but the content of those\nlist items will be the list of movies from the JSON in the second cache, the movie one with the JSON files.")]),e._v(" "),t("h3",{attrs:{id:"app-screens"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#app-screens"}},[e._v("#")]),e._v(" App Screens")]),e._v(" "),t("p",[e._v("The different screens in the app are:")]),e._v(" "),t("ol",[t("li",[e._v("Home screen - shows a title header and a search form with a search input, a way to pick the sort preference, and a search button.")]),e._v(" "),t("li",[e._v("Search Results screen - shows a title header and list tiles with thumbnail images, movie titles, and icons.")]),e._v(" "),t("li",[e._v("Cache Results screen - looks like the search results screen but only displays movies that are in the cache.")]),e._v(" "),t("li",[e._v("Movie Details screen - display a bigger image and lots of details about a single movie.")]),e._v(" "),t("li",[e._v("404 Error screen - when the user asks for a page that does not exist in the cache or online, return a custom 404 error page.")]),e._v(" "),t("li",[e._v("Favorites Screen - Display a list of movies marked as favorites by the user. Data fetched from a local cache or database.")])]),e._v(" "),t("h4",{attrs:{id:"home-screen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#home-screen"}},[e._v("#")]),e._v(" Home Screen")]),e._v(" "),t("p",[e._v("In the search form you need an "),t("code",[e._v('<input type="search" />')]),e._v(" to hold the keyword, a button to click to submit the form, and some way of choosing the sorting preference for the results - "),t("code",[e._v("release date")]),e._v(",\n"),t("code",[e._v("popularity")]),e._v(", or "),t("code",[e._v("votes")]),e._v(".")]),e._v(" "),t("p",[e._v("Submitting the form will navigate to the search results page and pass the details from the form through the query string.")]),e._v(" "),t("h4",{attrs:{id:"search-results-and-cache-results-screens"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#search-results-and-cache-results-screens"}},[e._v("#")]),e._v(" Search Results and Cache Results Screens")]),e._v(" "),t("p",[e._v("When this page loads, the script needs to read the values from the querystring and make the fetch call to the API that you are building for MAD9124.")]),e._v(" "),t("p",[e._v("If the browser is offline, and the user navigates to the search results page, the service worker will send back the cache results page instead.")]),e._v(" "),t("p",[e._v("If the browser is offline and the cache results page has loaded, the fetch call to the API does not happen because there is no connection to the API. Instead, the fetch call gets intercepted by the\nservice worker and it will return an array of all the JSON data in the Movie details cache. ALTERNATIVELY, you can have the script use "),t("code",[e._v("postMessage")]),e._v(" to send a request to the Service Worker to get all\nthe cached movie details. Only the service worker knows the name of the cache with the movie details JSON files. It needs to be the service worker the retrieves and send the JSON from the cache to the\nmain webpage script.")]),e._v(" "),t("p",[e._v("Both the search results and the cache results pages will display list tiles. Each list tile shows a thumbnail image for the movie, the movie title, and some icon. If the user clicks on a list tile,\nget the movie id from a "),t("code",[e._v("data-")]),e._v(" property in the list tile and send the user to the movie details page with the movie id in the querystring.")]),e._v(" "),t("h4",{attrs:{id:"movie-details-screen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#movie-details-screen"}},[e._v("#")]),e._v(" Movie Details screen")]),e._v(" "),t("p",[e._v("When the movie details screen loads, the script will read the movie id from the querystring and make a fetch call to the API that you are building for MAD9124 to get the details. If the browser is\nonline, then the service worker continues to make the API request. If the browser is offline then it looks in the cache.")]),e._v(" "),t("p",[e._v("When online, the results of every API search for a specific movie get saved in a movie details cache.")]),e._v(" "),t("h4",{attrs:{id:"custom-404-screen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#custom-404-screen"}},[e._v("#")]),e._v(" Custom 404 screen")]),e._v(" "),t("p",[e._v("Create a custom 404 error screen that is saved in the cache. If the user tries to navigate to a page that does not exist or is not in the cache then this custom 404 page should be returned to the\nbrowser and displayed.")]),e._v(" "),t("h4",{attrs:{id:"favorites-screen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#favorites-screen"}},[e._v("#")]),e._v(" Favorites screen")]),e._v(" "),t("p",[e._v("Display a list of movies marked as favorites by the user. Data fetched from a local cache or database.")]),e._v(" "),t("h3",{attrs:{id:"design-requirements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#design-requirements"}},[e._v("#")]),e._v(" Design Requirements")]),e._v(" "),t("p",[e._v("Your app needs a custom colour scheme that passes accessibility testing.")]),e._v(" "),t("p",[e._v("Your app needs a custom web font. (saved in the cache)")]),e._v(" "),t("p",[e._v("Your app needs an icon web font. (saved in the cache)")]),e._v(" "),t("p",[e._v("The interface layout responsively scales to work on any screen size.")]),e._v(" "),t("p",[e._v("Text sizes should responsively adjust for the available space as needed.")]),e._v(" "),t("p",[e._v("All the design elements should work when the app is offline too.")]),e._v(" "),t("h3",{attrs:{id:"pwa-requirements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pwa-requirements"}},[e._v("#")]),e._v(" PWA Requirements")]),e._v(" "),t("p",[e._v("There is a manifest file that includes all the different icon sizes.")]),e._v(" "),t("p",[e._v("There is a service worker that handles the install, activate, and fetch events.")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("File and Cache Paths")]),e._v(" "),t("p",[e._v("All the paths for the files in your cache and in your pages and scripts need to work locally when testing AND when the app is running off of Github Pages.")])]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("lighthouse")]),e._v(" PWA test passes in Chrome when run on the Github Pages version of your app and it can be installed.")]),e._v(" "),t("p",[e._v("There are TWO caches - one for the app files (like index.html) and one for the MOVIE "),t("code",[e._v(".json")]),e._v(" files.")]),e._v(" "),t("h3",{attrs:{id:"demo-video"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-video"}},[e._v("#")]),e._v(" Demo Video")]),e._v(" "),t("p",[e._v("Here is the demo video that outlines the functionality for this app.")]),e._v(" "),t("YouTube",{attrs:{title:"Movie PWA Project Demo",url:"https://www.youtube.com/embed/wRmgvkg_Muo"}}),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Tips for Success")]),e._v(" "),t("ul",[t("li",[e._v("Start your project early. Don't wait until a couple days before the due date.")]),e._v(" "),t("li",[e._v("Make many commits to your repo.")]),e._v(" "),t("li",[e._v("Push to Github and update your hosted site early and often.")]),e._v(" "),t("li",[e._v("Test the production version early and often.")])])]),e._v(" "),t("h3",{attrs:{id:"submission"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#submission"}},[e._v("#")]),e._v(" Submission")]),e._v(" "),t("ol",[t("li",[e._v("Create a "),t("strong",[e._v("private")]),e._v(" Github Repo and invite "),t("code",[e._v("shah0150")]),e._v(" to the repo.")]),e._v(" "),t("li",[e._v("Create a "),t("code",[e._v("Github Pages")]),e._v(" site, or "),t("code",[e._v("Vercel")]),e._v(" site, or "),t("code",[e._v("Netlify")]),e._v(" site using the "),t("code",[e._v("main")]),e._v(" branch for your "),t("strong",[e._v("private")]),e._v(" repo.")]),e._v(" "),t("li",[e._v("Fully test your app on "),t("code",[e._v("Github Pages")]),e._v(", or "),t("code",[e._v("Netlify")]),e._v(", or "),t("code",[e._v("Vercel")]),e._v(" to make sure that all the paths and functionality works.")]),e._v(" "),t("li",[e._v("Submit the public URL for your website.")]),e._v(" "),t("li",[e._v("Submit the URL for your "),t("strong",[e._v("private")]),e._v(" Github repo that contains your project to BS LMS.")])]),e._v(" "),t("blockquote",[t("p",[e._v("Due Week 7 (See BS LMS for exact date and time)")])]),e._v(" "),t("h1",{attrs:{id:"_2-nextjs-project"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-nextjs-project"}},[e._v("#")]),e._v(" 2. NextJS Project")]),e._v(" "),t("p",[e._v("//TODO: Update this for s2024 semester")]),e._v(" "),t("p",[e._v("For the final project you will be working with a partner to create a full-stack NextJS app version of the "),t("code",[e._v("Crapr")]),e._v(" app.")]),e._v(" "),t("p",[e._v("This project is a joint project between MAD9022 and MAD9124. The client-side React part of the project is for MAD9022 and the server-side MongoDB, NodeJS, Passport, and Express part is for MAD9124.")]),e._v(" "),t("p",[e._v("Make sure you let your instructors know who your partner is so the groups can be created in BS LMS for the assignment submissions.")]),e._v(" "),t("h2",{attrs:{id:"project-summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#project-summary"}},[e._v("#")]),e._v(" Project Summary")]),e._v(" "),t("p",[e._v("We are building a website that lets people get rid of unwanted crap from their homes. Everyone who visits the site needs to register and login in order to use the site. While not logged in they only\nsee the homepage and the about page. Any user can post about crap to get rid of or express interest in taking the crap. Let's call these different roles the "),t("code",[e._v("seller")]),e._v(" and the "),t("code",[e._v("buyer")]),e._v(".")]),e._v(" "),t("p",[e._v("After logging in, the "),t("code",[e._v("seller")]),e._v(" can create a post about what crap they are trying to get rid of. They can also view a list of all their own crap which has been posted. This list can be filtered by sold\nor not sold status.")]),e._v(" "),t("p",[e._v("After logging in, the "),t("code",[e._v("buyer")]),e._v(" can search for crap based on their current location, filtered by keyword.")]),e._v(" "),t("p",[e._v("When a "),t("code",[e._v("buyer")]),e._v(" finds something they want they can click a button to indicate that they want to have the crap.")]),e._v(" "),t("p",[e._v("After a "),t("code",[e._v("buyer")]),e._v(" has clicked the button, a "),t("code",[e._v("seller")]),e._v(" can see that interest has been expressed in the item by viewing their own posted crap list. The "),t("code",[e._v("seller")]),e._v(" responds by providing a pickup date and time\nrange, plus the actual physical pickup address. Alternatively the "),t("code",[e._v("seller")]),e._v(" can cancel the transaction telling the "),t("code",[e._v("buyer")]),e._v(" that they have decided to continue hoarding their crap.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("buyer")]),e._v(" finalizes the process by agreeing to the pickup time and date.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("seller")]),e._v(' marks the crap as sold or "flushed" after it has been picked up.')]),e._v(" "),t("p",[e._v("When a "),t("code",[e._v("seller")]),e._v(" or "),t("code",[e._v("buyer")]),e._v(" logs on, they should be notified about a change in status of one of their items OR taken directly to the page for the first item with an updated status.")]),e._v(" "),t("h2",{attrs:{id:"user-roles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#user-roles"}},[e._v("#")]),e._v(" User Roles")]),e._v(" "),t("p",[e._v("While we will often use "),t("code",[e._v("buyer")]),e._v(" and "),t("code",[e._v("seller")]),e._v(" to refer to a user, this only applies to the role that they are currently fulfilling on a page. Any user can be both or either. There are not two kinds of\nusers.")]),e._v(" "),t("p",[e._v("When someone posts some crap on the website, they are being a "),t("code",[e._v("seller")]),e._v(".")]),e._v(" "),t("p",[e._v("When someone expresses interest in a piece of crap, they are being a "),t("code",[e._v("buyer")]),e._v(".")]),e._v(" "),t("p",[e._v("It all has to do with the users' relationship to a single item.")]),e._v(" "),t("h2",{attrs:{id:"navigation-routes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#navigation-routes"}},[e._v("#")]),e._v(" Navigation Routes")]),e._v(" "),t("p",[e._v("Here is a list of the routes for the website.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("/")]),e._v(" : the home page which will display either the login/signup form OR a search form if you are logged in.")]),e._v(" "),t("li",[t("code",[e._v("/offer")]),e._v(" : page where a user can offer their crap to the world.")]),e._v(" "),t("li",[t("code",[e._v("/crap")]),e._v(" : results from a search based on keyword and location. Shows only the unclaimed crap.")]),e._v(" "),t("li",[t("code",[e._v("/mine")]),e._v(" : shows all the crap posted by the current user. Can be filtered with querystring param.")]),e._v(" "),t("li",[t("code",[e._v("/crap/[id]")]),e._v(" : shows the details for a specific unclaimed crap. From this page the buyer and seller can interact with each other.")]),e._v(" "),t("li",[t("code",[e._v("/wiped")]),e._v(" : the redirect page for a specific crap if it has been flushed or doesn't exist or is under negotiation and does not belong to the current user or the user who expressed interest.")])]),e._v(" "),t("h2",{attrs:{id:"functionality-and-features"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functionality-and-features"}},[e._v("#")]),e._v(" Functionality and Features")]),e._v(" "),t("p",[e._v("The user needs to be logged in to be able to use any features of the site.")]),e._v(" "),t("p",[e._v("From the home page, a user can log in and then, after being logged in, do a search for items. The search form needs to have an input for a keyword plus a selection of the distance range for searching.")]),e._v(" "),t("p",[e._v("On the search results page "),t("code",[e._v("/crap")]),e._v(" the results should display the titles and descriptions. Each result should be styled to indicate if an item belongs to the current user or not. Clicking on an item\nwill take the user to the "),t("code",[e._v("/crap/[id]")]),e._v(" page. Items that appear on this page will only be items with a status of "),t("code",[e._v("AVAILABLE")]),e._v(".")]),e._v(" "),t("p",[e._v("On the "),t("code",[e._v("/offer")]),e._v(" page, the user should be able to upload a new piece of crap. The new item needs to include a "),t("code",[e._v("title")]),e._v(", a "),t("code",[e._v("description")]),e._v(", and an image. After uploading a new item, redirect the user to\nthe "),t("code",[e._v("/mine")]),e._v(" page.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("/mine")]),e._v(" page should display a series of cards with the title, description, status, AND image for each piece of crap. The statuses for an item are "),t("code",[e._v("AVAILABLE")]),e._v(", "),t("code",[e._v("INTERESTED")]),e._v(", "),t("code",[e._v("SUGGESTED")]),e._v(", "),t("code",[e._v("AGREED")]),e._v(",\nand "),t("code",[e._v("FLUSHED")]),e._v(". Clicking on any of the cards will take the user to the "),t("code",[e._v("/card/[id]")]),e._v(" page.")]),e._v(" "),t("p",[e._v("On the "),t("code",[e._v("/card/[id]")]),e._v(" page, the user can see all the same details of the item PLUS a button to delete the item AND a form for changing the status of the item. The delete button is only shown IF the\ncurrent user owns the item. Depending on the current status of the item, there may be additional information like the address, date, and time for pick up.")]),e._v(" "),t("p",[e._v("The form for changing the status of the item changes depending on the current status.")]),e._v(" "),t("ul",[t("li",[e._v("If the current status is "),t("code",[e._v("AVAILABLE")]),e._v(", then the user needs a button to change the status to "),t("code",[e._v("INTERESTED")]),e._v(". Only a user who is NOT the owner of the item will see the form and be able to make the status\n"),t("code",[e._v("INTERESTED")]),e._v(".")]),e._v(" "),t("li",[e._v("If the current status is "),t("code",[e._v("INTERESTED")]),e._v(", then the user needs to be able to post an "),t("code",[e._v("address")]),e._v(", a "),t("code",[e._v("date")]),e._v(" for pick, and another string that represents the time for pickup. Only the owner of the item can\nadd this information and change the status to "),t("code",[e._v("SUGGESTED")]),e._v(".")]),e._v(" "),t("li",[e._v("If the current status is "),t("code",[e._v("SUGGESTED")]),e._v(", then the user must NOT be the owner to change the status to "),t("code",[e._v("AGREED")]),e._v(" with a click of a button.")]),e._v(" "),t("li",[e._v("If the current status is "),t("code",[e._v("AGREED")]),e._v(", then the OWNER of the item will get a button to "),t("code",[e._v("FLUSH")]),e._v(" the item. This means that it has been picked up.")])]),e._v(" "),t("h2",{attrs:{id:"design"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#design"}},[e._v("#")]),e._v(" Design")]),e._v(" "),t("p",[e._v("Your Layout "),t("strong",[e._v("must")]),e._v(" be Accessible and Responsive.")]),e._v(" "),t("h2",{attrs:{id:"hosting-and-routing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hosting-and-routing"}},[e._v("#")]),e._v(" Hosting and Routing")]),e._v(" "),t("p",[e._v("You will need to create a private Github Repo that holds the code for your React app.")]),e._v(" "),t("p",[e._v("You will need to connect your repo to Vercel, which will be responsible for the build process and hosting of the website.")]),e._v(" "),t("p",[e._v("Remember to set your ENV variables on Vercel, so you have a different set on localhost than on Vercel.")]),e._v(" "),t("p",[e._v("Optional bonus / future features")]),e._v(" "),t("ul",[t("li",[e._v("rate the buyer")]),e._v(" "),t("li",[e._v("rate the seller")]),e._v(" "),t("li",[e._v("propose alternate pick up time and date")]),e._v(" "),t("li",[e._v("push notifications about buying and selling")]),e._v(" "),t("li")]),e._v(" "),t("h2",{attrs:{id:"submission-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#submission-2"}},[e._v("#")]),e._v(" Submission")]),e._v(" "),t("h3",{attrs:{id:"code-review-interview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#code-review-interview"}},[e._v("#")]),e._v(" Code Review Interview")]),e._v(" "),t("p",[e._v("20% of your grade for this project will be for completing an interview with your instructor "),t("strong",[e._v("during class in week 15.")])]),e._v(" "),t("p",[t("strong",[e._v("BOTH")]),e._v(" partners must be present at the same time for the interview. Missing the interview means that the missing person gets zero for that 20%. Your project does not need to be complete to take part\nin the code review interview process.")]),e._v(" "),t("p",[e._v("The interview will consist of two parts, for each person:")]),e._v(" "),t("ol",[t("li",[e._v("You explain how the code for one feature works.")]),e._v(" "),t("li",[e._v("Your instructor will ask you to explain one or two items your code.")])]),e._v(" "),t("h3",{attrs:{id:"code-submission"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#code-submission"}},[e._v("#")]),e._v(" Code submission")]),e._v(" "),t("p",[e._v("Submission for this project requires multiple steps.")]),e._v(" "),t("ol",[t("li",[e._v("You will need to submit the "),t("code",[e._v("private Github repo URL")]),e._v(" for your NextJS project.")]),e._v(" "),t("li",[e._v("Submit the "),t("code",[e._v("private Github repo URL")]),e._v(" for your MAD9124 API.")]),e._v(" "),t("li",[e._v("Submit the public URL for your MAD9124 API plus")]),e._v(" "),t("li",[e._v("Submit the public URL for your "),t("code",[e._v("production Vercel NextJS site")]),e._v(".")]),e._v(" "),t("li",[e._v("Invite your instructor to "),t("strong",[e._v("BOTH")]),e._v(" your private repos.")]),e._v(" "),t("li",[e._v("Invite your instructor to your Vercel dashboard.")])]),e._v(" "),t("p",[e._v("See BS LMS for the exact due date and time.")]),e._v(" "),t("p",[e._v("Late submissions will NOT be accepted.")])],1)}),[],!1,null,null,null);t.default=o.exports}}]);